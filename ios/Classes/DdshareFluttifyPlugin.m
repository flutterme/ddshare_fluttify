//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "DdshareFluttifyPlugin.h"

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// Dart端随机存取对象的容器
extern BOOL enableLog;

@implementation DdshareFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"DTOpenAPIDelegate::onReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          DTBaseReq* req = (DTBaseReq*) HEAP[@([args[@"req"] integerValue])];
      
          // ref
          id<DTOpenAPIDelegate> ref = (id<DTOpenAPIDelegate>) HEAP[args[@"refId"]];
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPIDelegate@%@::onReq(暂未实现参数打印)", args[@"refId"]);
      
          // invoke native method
          [ref onReq : req];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"DTOpenAPIDelegate::onResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          DTBaseResp* resp = (DTBaseResp*) HEAP[@([args[@"resp"] integerValue])];
      
          // ref
          id<DTOpenAPIDelegate> ref = (id<DTOpenAPIDelegate>) HEAP[args[@"refId"]];
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPIDelegate@%@::onResp(暂未实现参数打印)", args[@"refId"]);
      
          // invoke native method
          [ref onResp : resp];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"DTOpenAPI::registerApp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* appId = (NSString*) args[@"appId"];
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::registerApp(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI registerApp: appId];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::registerAppAppDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* appId = (NSString*) args[@"appId"];
          // jsonable arg
          NSString* appDescription = (NSString*) args[@"appDescription"];
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::registerApp(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI registerApp: appId appDescription: appDescription];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::isDingTalkInstalled": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::isDingTalkInstalled(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI isDingTalkInstalled];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::isDingTalkSupportOpenAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::isDingTalkSupportOpenAPI(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI isDingTalkSupportOpenAPI];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::isDingTalkSupportSSO": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::isDingTalkSupportSSO(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI isDingTalkSupportSSO];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::appStoreURLOfDingTalk": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::appStoreURLOfDingTalk(暂未实现参数打印)");
      
          // invoke native method
          NSString* result = [DTOpenAPI appStoreURLOfDingTalk];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"DTOpenAPI::openAPIVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::openAPIVersion(暂未实现参数打印)");
      
          // invoke native method
          NSString* result = [DTOpenAPI openAPIVersion];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"DTOpenAPI::openDingTalk": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::openDingTalk(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI openDingTalk];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::openDingTalkForSSO": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::openDingTalkForSSO(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI openDingTalkForSSO];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::sendReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          DTBaseReq* req = (DTBaseReq*) HEAP[@([args[@"req"] integerValue])];
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::sendReq(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI sendReq: req];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTOpenAPI::sendResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          DTBaseResp* resp = (DTBaseResp*) HEAP[@([args[@"resp"] integerValue])];
      
          // ref
      
      
          // print log
          NSLog(@"fluttify-objc: DTOpenAPI::sendResp(暂未实现参数打印)");
      
          // invoke native method
          BOOL result = [DTOpenAPI sendResp: resp];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"DTBaseResp::get_errorCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTBaseResp::get_errorCode");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTBaseResp* ref = (DTBaseResp*) HEAP[@(refId)];
      
          // invoke native method
          DTOpenAPIErrorCode result = ref.errorCode;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"DTBaseResp::get_errorMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTBaseResp::get_errorMessage");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTBaseResp* ref = (DTBaseResp*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.errorMessage;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTAuthorizeReq::get_redirectURI": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTAuthorizeReq::get_redirectURI");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTAuthorizeReq* ref = (DTAuthorizeReq*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.redirectURI;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTAuthorizeReq::get_bundleId": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTAuthorizeReq::get_bundleId");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTAuthorizeReq* ref = (DTAuthorizeReq*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.bundleId;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTAuthorizeResp::get_accessCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTAuthorizeResp::get_accessCode");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTAuthorizeResp* ref = (DTAuthorizeResp*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.accessCode;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTSendMessageToDingTalkReq::get_message": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTSendMessageToDingTalkReq::get_message");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTSendMessageToDingTalkReq* ref = (DTSendMessageToDingTalkReq*) HEAP[@(refId)];
      
          // invoke native method
          DTMediaMessage* result = ref.message;
      
          // 返回值: 引用
          HEAP[@(result.hash)] = result;
          methodResult(@(result.hash));
      },
      
      @"DTSendMessageToDingTalkReq::get_scene": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTSendMessageToDingTalkReq::get_scene");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTSendMessageToDingTalkReq* ref = (DTSendMessageToDingTalkReq*) HEAP[@(refId)];
      
          // invoke native method
          DTScene result = ref.scene;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"DTMediaMessage::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaMessage::get_title");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaMessage* ref = (DTMediaMessage*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.title;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTMediaMessage::get_messageDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaMessage::get_messageDescription");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaMessage* ref = (DTMediaMessage*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.messageDescription;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTMediaMessage::get_thumbURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaMessage::get_thumbURL");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaMessage* ref = (DTMediaMessage*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.thumbURL;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTMediaTextObject::get_text": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaTextObject::get_text");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaTextObject* ref = (DTMediaTextObject*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.text;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTMediaImageObject::get_imageURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaImageObject::get_imageURL");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaImageObject* ref = (DTMediaImageObject*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.imageURL;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTMediaWebObject::get_pageURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaWebObject::get_pageURL");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaWebObject* ref = (DTMediaWebObject*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.pageURL;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTMediaAlipayObject::get_pageURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaAlipayObject::get_pageURL");
      
          // ref object
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaAlipayObject* ref = (DTMediaAlipayObject*) HEAP[@(refId)];
      
          // invoke native method
          NSString* result = ref.pageURL;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"DTBaseResp::set_errorCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTBaseResp::set_errorCode");
      
          // args
          // enum arg
          DTOpenAPIErrorCode errorCode = (DTOpenAPIErrorCode) [args[@"errorCode"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTBaseResp* ref = (DTBaseResp*) HEAP[@(refId)];
      
          ref.errorCode = errorCode;
          methodResult(@"success");
      },
      
      @"DTBaseResp::set_errorMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTBaseResp::set_errorMessage");
      
          // args
          // jsonable arg
          NSString* errorMessage = (NSString*) args[@"errorMessage"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTBaseResp* ref = (DTBaseResp*) HEAP[@(refId)];
      
          ref.errorMessage = errorMessage;
          methodResult(@"success");
      },
      
      @"DTAuthorizeReq::set_redirectURI": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTAuthorizeReq::set_redirectURI");
      
          // args
          // jsonable arg
          NSString* redirectURI = (NSString*) args[@"redirectURI"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTAuthorizeReq* ref = (DTAuthorizeReq*) HEAP[@(refId)];
      
          ref.redirectURI = redirectURI;
          methodResult(@"success");
      },
      
      @"DTAuthorizeReq::set_bundleId": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTAuthorizeReq::set_bundleId");
      
          // args
          // jsonable arg
          NSString* bundleId = (NSString*) args[@"bundleId"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTAuthorizeReq* ref = (DTAuthorizeReq*) HEAP[@(refId)];
      
          ref.bundleId = bundleId;
          methodResult(@"success");
      },
      
      @"DTAuthorizeResp::set_accessCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTAuthorizeResp::set_accessCode");
      
          // args
          // jsonable arg
          NSString* accessCode = (NSString*) args[@"accessCode"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTAuthorizeResp* ref = (DTAuthorizeResp*) HEAP[@(refId)];
      
          ref.accessCode = accessCode;
          methodResult(@"success");
      },
      
      @"DTSendMessageToDingTalkReq::set_message": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTSendMessageToDingTalkReq::set_message");
      
          // args
          // ref arg
          DTMediaMessage* message = (DTMediaMessage*) HEAP[@([args[@"message"] integerValue])];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTSendMessageToDingTalkReq* ref = (DTSendMessageToDingTalkReq*) HEAP[@(refId)];
      
          ref.message = message;
          methodResult(@"success");
      },
      
      @"DTSendMessageToDingTalkReq::set_scene": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTSendMessageToDingTalkReq::set_scene");
      
          // args
          // enum arg
          DTScene scene = (DTScene) [args[@"scene"] integerValue];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTSendMessageToDingTalkReq* ref = (DTSendMessageToDingTalkReq*) HEAP[@(refId)];
      
          ref.scene = scene;
          methodResult(@"success");
      },
      
      @"DTMediaMessage::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaMessage::set_title");
      
          // args
          // jsonable arg
          NSString* title = (NSString*) args[@"title"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaMessage* ref = (DTMediaMessage*) HEAP[@(refId)];
      
          ref.title = title;
          methodResult(@"success");
      },
      
      @"DTMediaMessage::set_messageDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaMessage::set_messageDescription");
      
          // args
          // jsonable arg
          NSString* messageDescription = (NSString*) args[@"messageDescription"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaMessage* ref = (DTMediaMessage*) HEAP[@(refId)];
      
          ref.messageDescription = messageDescription;
          methodResult(@"success");
      },
      
      @"DTMediaMessage::set_thumbURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaMessage::set_thumbURL");
      
          // args
          // jsonable arg
          NSString* thumbURL = (NSString*) args[@"thumbURL"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaMessage* ref = (DTMediaMessage*) HEAP[@(refId)];
      
          ref.thumbURL = thumbURL;
          methodResult(@"success");
      },
      
      @"DTMediaTextObject::set_text": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaTextObject::set_text");
      
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaTextObject* ref = (DTMediaTextObject*) HEAP[@(refId)];
      
          ref.text = text;
          methodResult(@"success");
      },
      
      @"DTMediaImageObject::set_imageURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaImageObject::set_imageURL");
      
          // args
          // jsonable arg
          NSString* imageURL = (NSString*) args[@"imageURL"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaImageObject* ref = (DTMediaImageObject*) HEAP[@(refId)];
      
          ref.imageURL = imageURL;
          methodResult(@"success");
      },
      
      @"DTMediaWebObject::set_pageURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaWebObject::set_pageURL");
      
          // args
          // jsonable arg
          NSString* pageURL = (NSString*) args[@"pageURL"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaWebObject* ref = (DTMediaWebObject*) HEAP[@(refId)];
      
          ref.pageURL = pageURL;
          methodResult(@"success");
      },
      
      @"DTMediaAlipayObject::set_pageURL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"DTMediaAlipayObject::set_pageURL");
      
          // args
          // jsonable arg
          NSString* pageURL = (NSString*) args[@"pageURL"];
      
          NSInteger refId = [args[@"refId"] integerValue];
          DTMediaAlipayObject* ref = (DTMediaAlipayObject*) HEAP[@(refId)];
      
          ref.pageURL = pageURL;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfDTBaseReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTBaseReq class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTBaseResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTBaseResp class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTAuthorizeReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTAuthorizeReq class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTAuthorizeResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTAuthorizeResp class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTSendMessageToDingTalkReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTSendMessageToDingTalkReq class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTSendMessageToDingTalkResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTSendMessageToDingTalkResp class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTMediaMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTMediaMessage class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTMediaTextObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTMediaTextObject class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTMediaImageObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTMediaImageObject class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTMediaWebObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTMediaWebObject class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTMediaAlipayObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTMediaAlipayObject class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfDTOpenAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[DTOpenAPI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asDTBaseReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTBaseReq *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTBaseResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTBaseResp *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTAuthorizeReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTAuthorizeReq *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTAuthorizeResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTAuthorizeResp *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTSendMessageToDingTalkReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTSendMessageToDingTalkReq *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTSendMessageToDingTalkResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTSendMessageToDingTalkResp *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTMediaMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTMediaMessage *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTMediaTextObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTMediaTextObject *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTMediaImageObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTMediaImageObject *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTMediaWebObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTMediaWebObject *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTMediaAlipayObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTMediaAlipayObject *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asDTOpenAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (DTOpenAPI *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"ObjectFactory::createDTBaseReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTBaseReq");
      
          DTBaseReq* ref = [[DTBaseReq alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTBaseResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTBaseResp");
      
          DTBaseResp* ref = [[DTBaseResp alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTAuthorizeReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTAuthorizeReq");
      
          DTAuthorizeReq* ref = [[DTAuthorizeReq alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTAuthorizeResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTAuthorizeResp");
      
          DTAuthorizeResp* ref = [[DTAuthorizeResp alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTSendMessageToDingTalkReq": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTSendMessageToDingTalkReq");
      
          DTSendMessageToDingTalkReq* ref = [[DTSendMessageToDingTalkReq alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTSendMessageToDingTalkResp": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTSendMessageToDingTalkResp");
      
          DTSendMessageToDingTalkResp* ref = [[DTSendMessageToDingTalkResp alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTMediaMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTMediaMessage");
      
          DTMediaMessage* ref = [[DTMediaMessage alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTMediaTextObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTMediaTextObject");
      
          DTMediaTextObject* ref = [[DTMediaTextObject alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTMediaImageObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTMediaImageObject");
      
          DTMediaImageObject* ref = [[DTMediaImageObject alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTMediaWebObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTMediaWebObject");
      
          DTMediaWebObject* ref = [[DTMediaWebObject alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTMediaAlipayObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTMediaAlipayObject");
      
          DTMediaAlipayObject* ref = [[DTMediaAlipayObject alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createDTOpenAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          NSLog(@"ObjectFactory::createDTOpenAPI");
      
          DTOpenAPI* ref = [[DTOpenAPI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/ddshare_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[DdshareFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, args, methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)onReq : (DTBaseReq*)req
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"DTOpenAPIDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"DTOpenAPIDelegate::onReq");

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argreq = @(req.hash);
  HEAP[argreq] = req;

  [channel invokeMethod:@"Callback::DTOpenAPIDelegate::onReq" arguments:@{@"req": argreq}];
  
}

- (void)onResp : (DTBaseResp*)resp
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"DTOpenAPIDelegate::Callback"
            binaryMessenger:[_registrar messenger]];

  NSLog(@"DTOpenAPIDelegate::onResp");

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argresp = @(resp.hash);
  HEAP[argresp] = resp;

  [channel invokeMethod:@"Callback::DTOpenAPIDelegate::onResp" arguments:@{@"resp": argresp}];
  
}


@end