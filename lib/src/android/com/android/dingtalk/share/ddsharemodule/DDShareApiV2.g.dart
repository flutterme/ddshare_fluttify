//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:ddshare_fluttify/src/ios/ios.export.g.dart';
import 'package:ddshare_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_android_dingtalk_share_ddsharemodule_DDShareApiV2 extends java_lang_Object  {
  // generate getters
  

  // generate setters
  

  // generate methods
  Future<bool> registerApp(String appId) async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::registerApp([\'appId\':$appId])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::registerApp', {"appId": appId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> unregisterApp() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::unregisterApp([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::unregisterApp', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> isDDAppInstalled() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::isDDAppInstalled([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::isDDAppInstalled', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> isDDSupportAPI() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::isDDSupportAPI([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::isDDSupportAPI', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> isDDSupportDingAPI() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::isDDSupportDingAPI([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::isDDSupportDingAPI', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getDDSupportAPI() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::getDDSupportAPI([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::getDDSupportAPI', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> openDDApp() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::openDDApp([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::openDDApp', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> sendReq(com_android_dingtalk_share_ddsharemodule_message_BaseReq baseReq) async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::sendReq([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::sendReq', {"baseReq": baseReq.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> sendReqToDing(com_android_dingtalk_share_ddsharemodule_message_BaseReq baseReq) async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.DDShareApiV2@$refId::sendReqToDing([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.DDShareApiV2::sendReqToDing', {"baseReq": baseReq.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}