//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:ddshare_fluttify/src/ios/ios.export.g.dart';
import 'package:ddshare_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_android_dingtalk_share_ddsharemodule_message_DDFileMessage extends java_lang_Object  {
  // generate getters
  

  // generate setters
  

  // generate methods
  Future<void> serialize(android_os_Bundle var1) async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.DDFileMessage@$refId::serialize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.message.DDFileMessage::serialize', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> unserialize(android_os_Bundle var1) async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.DDFileMessage@$refId::unserialize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.message.DDFileMessage::unserialize', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> type() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.DDFileMessage@$refId::type([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.message.DDFileMessage::type', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> checkArgs() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.DDFileMessage@$refId::checkArgs([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.message.DDFileMessage::checkArgs', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getSupportVersion() async {
    // print log
    if (!kReleaseMode) {
      print('fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.DDFileMessage@$refId::getSupportVersion([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod('com.android.dingtalk.share.ddsharemodule.message.DDFileMessage::getSupportVersion', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}