//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:ddshare_fluttify/src/ios/ios.export.g.dart';
import 'package:ddshare_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_android_dingtalk_share_ddsharemodule_message_BaseReq
    extends java_lang_Object {
  // generate getters
  Future<String> get_mTransaction() async {
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            "com.android.dingtalk.share.ddsharemodule.message.BaseReq::get_mTransaction",
            {'refId': refId});

    return result;
  }

  // generate setters
  Future<void> set_mTransaction(String mTransaction) async {
    await MethodChannel('com.fluttify/ddshare_fluttify').invokeMethod(
        'com.android.dingtalk.share.ddsharemodule.message.BaseReq::set_mTransaction',
        {'refId': refId, "mTransaction": mTransaction});
  }

  // generate methods
  Future<int> getType() async {
    // print log
    if (fluttifyLogEnabled) {
      print(
          'fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.BaseReq@$refId::getType([])');
    }

    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            'com.android.dingtalk.share.ddsharemodule.message.BaseReq::getType',
            {"refId": refId});

    // handle native call

    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      return result;
    }
  }

  Future<void> toBundle(android_os_Bundle bundle) async {
    // print log
    if (fluttifyLogEnabled) {
      print(
          'fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.BaseReq@$refId::toBundle([])');
    }

    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            'com.android.dingtalk.share.ddsharemodule.message.BaseReq::toBundle',
            {"bundle": bundle.refId, "refId": refId});

    // handle native call

    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      return result;
    }
  }

  Future<void> fromBundle(android_os_Bundle bundle) async {
    // print log
    if (fluttifyLogEnabled) {
      print(
          'fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.BaseReq@$refId::fromBundle([])');
    }

    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            'com.android.dingtalk.share.ddsharemodule.message.BaseReq::fromBundle',
            {"bundle": bundle.refId, "refId": refId});

    // handle native call

    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      return result;
    }
  }

  Future<bool> checkArgs() async {
    // print log
    if (fluttifyLogEnabled) {
      print(
          'fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.BaseReq@$refId::checkArgs([])');
    }

    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            'com.android.dingtalk.share.ddsharemodule.message.BaseReq::checkArgs',
            {"refId": refId});

    // handle native call

    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      return result;
    }
  }

  Future<int> getSupportVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      print(
          'fluttify-dart: com.android.dingtalk.share.ddsharemodule.message.BaseReq@$refId::getSupportVersion([])');
    }

    // invoke native method
    final result = await MethodChannel('com.fluttify/ddshare_fluttify')
        .invokeMethod(
            'com.android.dingtalk.share.ddsharemodule.message.BaseReq::getSupportVersion',
            {"refId": refId});

    // handle native call

    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      return result;
    }
  }
}
