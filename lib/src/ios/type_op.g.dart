//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:ddshare_fluttify/src/android/android.export.g.dart';
import 'package:ddshare_fluttify/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
Future<bool> isKindOfDTBaseReq(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTBaseReq', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTBaseResp(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTBaseResp', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTAuthorizeReq(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTAuthorizeReq', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTAuthorizeResp(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTAuthorizeResp', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTSendMessageToDingTalkReq(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod(
          'RefClass::isKindOfDTSendMessageToDingTalkReq', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTSendMessageToDingTalkResp(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTSendMessageToDingTalkResp',
          {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTMediaMessage(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTMediaMessage', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTMediaTextObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod(
          'RefClass::isKindOfDTMediaTextObject', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTMediaImageObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod(
          'RefClass::isKindOfDTMediaImageObject', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTMediaWebObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTMediaWebObject', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTMediaAlipayObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod(
          'RefClass::isKindOfDTMediaAlipayObject', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfDTOpenAPI(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::isKindOfDTOpenAPI', {'refId': ref.refId});
  return result;
}

Future<DTBaseReq> asDTBaseReq(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTBaseReq', {'refId': ref.refId});
  return DTBaseReq()..refId = result;
}

Future<DTBaseResp> asDTBaseResp(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTBaseResp', {'refId': ref.refId});
  return DTBaseResp()..refId = result;
}

Future<DTAuthorizeReq> asDTAuthorizeReq(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTAuthorizeReq', {'refId': ref.refId});
  return DTAuthorizeReq()..refId = result;
}

Future<DTAuthorizeResp> asDTAuthorizeResp(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTAuthorizeResp', {'refId': ref.refId});
  return DTAuthorizeResp()..refId = result;
}

Future<DTSendMessageToDingTalkReq> asDTSendMessageToDingTalkReq(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod(
          'RefClass::asDTSendMessageToDingTalkReq', {'refId': ref.refId});
  return DTSendMessageToDingTalkReq()..refId = result;
}

Future<DTSendMessageToDingTalkResp> asDTSendMessageToDingTalkResp(
    Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod(
          'RefClass::asDTSendMessageToDingTalkResp', {'refId': ref.refId});
  return DTSendMessageToDingTalkResp()..refId = result;
}

Future<DTMediaMessage> asDTMediaMessage(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTMediaMessage', {'refId': ref.refId});
  return DTMediaMessage()..refId = result;
}

Future<DTMediaTextObject> asDTMediaTextObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTMediaTextObject', {'refId': ref.refId});
  return DTMediaTextObject()..refId = result;
}

Future<DTMediaImageObject> asDTMediaImageObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTMediaImageObject', {'refId': ref.refId});
  return DTMediaImageObject()..refId = result;
}

Future<DTMediaWebObject> asDTMediaWebObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTMediaWebObject', {'refId': ref.refId});
  return DTMediaWebObject()..refId = result;
}

Future<DTMediaAlipayObject> asDTMediaAlipayObject(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTMediaAlipayObject', {'refId': ref.refId});
  return DTMediaAlipayObject()..refId = result;
}

Future<DTOpenAPI> asDTOpenAPI(Ref ref) async {
  final result = await MethodChannel('com.fluttify/ddshare_fluttify')
      .invokeMethod('RefClass::asDTOpenAPI', {'refId': ref.refId});
  return DTOpenAPI()..refId = result;
}
